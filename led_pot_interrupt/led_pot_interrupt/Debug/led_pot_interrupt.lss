
led_pot_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000853  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d2  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040f  00000000  00000000  00001379  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d9  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a5  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  88:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:

volatile uint8_t counter_timer_overflow;

void adc_init() {
	// Wake ADC up from sleep
	PRR &= ~(1 << 0); // PRADC=0
  90:	e4 e6       	ldi	r30, 0x64	; 100
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	80 83       	st	Z, r24
	// ADREF = AVcc [REFS0=1, REFS1=0]
	// ADLAR = 1
	ADMUX = (1 << 6) | (1 << 5); // 01100000
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1 << 7) | (1 << 1) | (1 << 0); // 10000011
  a0:	83 e8       	ldi	r24, 0x83	; 131
  a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a6:	08 95       	ret

000000a8 <adc_read>:
}

uint8_t adc_read(uint8_t ch) {
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	adc_init();
  ac:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	// Masking channel to be 0-3 (PC0-PC3)
	ch &= 3;
	// Setting the multiplex to be the "ch", clearing the 2 bits first
	ADMUX = (ADMUX & 0xFC) | ch; //FC = 11111100, ch is 00|01|10|11
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8c 7f       	andi	r24, 0xFC	; 252
  b8:	c3 70       	andi	r28, 0x03	; 3
  ba:	c8 2b       	or	r28, r24
  bc:	c0 83       	st	Z, r28
	// Start conversation
	ADCSRA |= (1 << 6);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	// Waiting for the conversation to finish with rechecking the ADCS
	while (ADCSRA & (1 << 6));
  c8:	80 81       	ld	r24, Z
  ca:	86 fd       	sbrc	r24, 6
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <adc_read+0x20>
	// Once the conversation over I read the result and empty the flag
	ADCSRA |= (1 << 4); // ADIF
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	80 83       	st	Z, r24
	return ADCH;
  d8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <set_pins_direction>:

void set_pins_direction() {
	// Setting ADC0=PC0 as input
	DDRC = 0;
  e0:	17 b8       	out	0x07, r1	; 7
	// Setting bus D as input, for INT0-PD2 interrupts
	DDRD = 0;
  e2:	1a b8       	out	0x0a, r1	; 10
	// Setting PD3 as output (PWM - OC2B)
	DDRD = (1 << PD3);
  e4:	88 e0       	ldi	r24, 0x08	; 8
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	08 95       	ret

000000ea <setup>:
}

void setup() {
	// Disabling all digital input buffers on ADC pins [21.9.5, p.266]
	DIDR0 = 0x3F;
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	DIDR1 = 0x03; // 20.3.3 p.249
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
	// Disabling Analog comperator for reducing power
	ACSR |= (1 << 7); // [20.3.2 p.247]
  f6:	80 b7       	in	r24, 0x30	; 48
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 bf       	out	0x30, r24	; 48
	// Disable Timers [12.9.2, p.109]
	TCCR0B = 0;
  fc:	15 bc       	out	0x25, r1	; 37
	TCCR1B = 0;
  fe:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR2B = 0;
 102:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	// Disable Watchdog timer [p.50]
	MCUSR &= ~(1 << 3); // WDRF clear (not mendatory)
 106:	84 b7       	in	r24, 0x34	; 52
 108:	87 7f       	andi	r24, 0xF7	; 247
 10a:	84 bf       	out	0x34, r24	; 52
	WDTCSR = (1 << 4); // WDCE (change enabler)
 10c:	e0 e6       	ldi	r30, 0x60	; 96
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	80 83       	st	Z, r24
	WDTCSR = 0; // clear WDE and all register
 114:	10 82       	st	Z, r1
	// Disabling USART, Disabling SPI, Disabling TWI and Reducing power [7.11.3 p.45]
	PRR = 0xF7;
 116:	87 ef       	ldi	r24, 0xF7	; 247
 118:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 11c:	08 95       	ret

0000011e <pwm_start>:
}

void pwm_start(uint8_t val) {
	// PRTIM2 to 0, canceling power reduce, OC2A as output
	PRR &= ~(1 << 6); // Enabling timer2 on PRR
 11e:	e4 e6       	ldi	r30, 0x64	; 100
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	9f 7b       	andi	r25, 0xBF	; 191
 126:	90 83       	st	Z, r25
	TCNT2 = 0; // clearing counter
 128:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	// Setting Fast PWM non-inverted mode, TOP = OCRA, with prescaler of 32
	TCCR2A = (1 << 5) | (1 << 1) | (1 << 0);
 12c:	93 e2       	ldi	r25, 0x23	; 35
 12e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1 << 3) | (1 << 1) | (1 << 0);
 132:	9b e0       	ldi	r25, 0x0B	; 11
 134:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 82; // TOP Value, with 122hz cycle, TOP=82 will give 100hz cycle
 138:	e3 eb       	ldi	r30, 0xB3	; 179
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	92 e5       	ldi	r25, 0x52	; 82
 13e:	90 83       	st	Z, r25
	if (val > 100) val = 100; // limiting val to 100%
	OCR2B = OCR2A * val / 100; //OCR2B set to TOPxN%
 140:	90 81       	ld	r25, Z
 142:	85 36       	cpi	r24, 0x65	; 101
 144:	08 f0       	brcs	.+2      	; 0x148 <pwm_start+0x2a>
 146:	84 e6       	ldi	r24, 0x64	; 100
 148:	89 9f       	mul	r24, r25
 14a:	c0 01       	movw	r24, r0
 14c:	11 24       	eor	r1, r1
 14e:	64 e6       	ldi	r22, 0x64	; 100
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 56 01 	call	0x2ac	; 0x2ac <__divmodhi4>
 156:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 15a:	08 95       	ret

0000015c <sleep_power>:
}

void sleep_power() {
	// Reducing power [7.10 p.42]
	// Disabling ADC and ADC clock and Timer2 and Timer0
	PRR |= (1 << 0) | (1 << 6) | (1 << 5); // PRADC=1, PRTIM2=1, PRTIM0=1
 15c:	e4 e6       	ldi	r30, 0x64	; 100
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	81 66       	ori	r24, 0x61	; 97
 164:	80 83       	st	Z, r24
	ADCSRA &= (1 << 7); // ADEN=0
 166:	ea e7       	ldi	r30, 0x7A	; 122
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 78       	andi	r24, 0x80	; 128
 16e:	80 83       	st	Z, r24
	// Set all pins as input
	DDRB = 0;
 170:	14 b8       	out	0x04, r1	; 4
	DDRC = 0;
 172:	17 b8       	out	0x07, r1	; 7
	DDRD = 0;
 174:	1a b8       	out	0x0a, r1	; 10
	// Interrupts
	EICRA = (1 << 1) | (1 << 0); // Enable INT0 rising edge interrupt. ISC01:0=1,1 [10.2.1 p.71]
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1 << 0); // INT0 interrupt enable [10.2.2 p.72]
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	8d bb       	out	0x1d, r24	; 29
	SREG |= (1 << 7); // Enabling interrupt [4.3.1 p.10]
 180:	8f b7       	in	r24, 0x3f	; 63
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8f bf       	out	0x3f, r24	; 63
	// Set sleep mode
	SMCR = (1 << 2); // Power-Down mode [7.11.1 p.44]
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	83 bf       	out	0x33, r24	; 51
	// Disable BOD on sleep [p.44] less than 3 cycles before sleep
	MCUCR = (1 << 6) | (1 << 5);
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<BODSE);  // [7.11.2 p.44]
 18e:	85 b7       	in	r24, 0x35	; 53
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	85 bf       	out	0x35, r24	; 53
	// Go To sleep
	SMCR |= (1 << 0); // SE=1 (Sleep enable)
 194:	83 b7       	in	r24, 0x33	; 51
 196:	81 60       	ori	r24, 0x01	; 1
 198:	83 bf       	out	0x33, r24	; 51
 19a:	08 95       	ret

0000019c <start_timer_seconds>:

void start_timer_seconds(uint8_t seconds) {
	// Using Timer0 in CTC mode with prescaler:
	// prescaler 1024: 1M/1024 = 976hz ticks. OCR0A of 244 will give TOV every 244x(1/976)=0.25.
	// counting 4 times TOV = 1 second.
	PRR &= ~(1 << 5); // Enabling timer0 on PRR
 19c:	e4 e6       	ldi	r30, 0x64	; 100
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	90 81       	ld	r25, Z
 1a2:	9f 7d       	andi	r25, 0xDF	; 223
 1a4:	90 83       	st	Z, r25
	counter_timer_overflow = seconds * 4; // starting from TOP and reducing to 0 every TOV interrupt
 1a6:	88 0f       	add	r24, r24
 1a8:	88 0f       	add	r24, r24
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	TCCR0A = (1 << 1); // Normal port operation, CTC mode (WGM01=1) [12.9.1 p.106]
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << 2) | (1 << 0); // CS00:2 = 1,0,1 = prescaler 1024
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	95 bd       	out	0x25, r25	; 37
	OCR0A = 244;
 1b6:	94 ef       	ldi	r25, 0xF4	; 244
 1b8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << 1); // OCIE0A - compare interrupt [12.9.6 p.111]
 1ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	SREG |= (1 << 7); // Enabling interrupt [4.3.1 p.10]
 1be:	8f b7       	in	r24, 0x3f	; 63
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	8f bf       	out	0x3f, r24	; 63
 1c4:	08 95       	ret

000001c6 <led_power_on>:
}

void led_power_on(uint8_t adc_ch) {
	uint8_t level = adc_read(adc_ch);
 1c6:	0e 94 54 00 	call	0xa8	; 0xa8 <adc_read>
	pwm_start(level);
 1ca:	0e 94 8f 00 	call	0x11e	; 0x11e <pwm_start>
	start_timer_seconds(LED_SECONDS);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 ce 00 	call	0x19c	; 0x19c <start_timer_seconds>
 1d4:	08 95       	ret

000001d6 <main>:
}

int main() {
	setup();
 1d6:	0e 94 75 00 	call	0xea	; 0xea <setup>
	set_pins_direction();
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <set_pins_direction>
	led_power_on(POT_ADC_PIN);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <led_power_on>
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <main+0xe>

000001e6 <__vector_1>:
	while (1);
}

ISR(INT0_vect) {
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	5f 93       	push	r21
 1f8:	6f 93       	push	r22
 1fa:	7f 93       	push	r23
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	EIFR = (1 << 0); // clear flag [10.2.3 p.72]
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	8c bb       	out	0x1c, r24	; 28
	EIMSK &= ~(1 << 0); // Disabling interrupt [10.2.2 p.72]
 20c:	e8 98       	cbi	0x1d, 0	; 29
	SREG &= ~(1 << 7); // Disabling interrupt [4.3.1 p.10]
 20e:	8f b7       	in	r24, 0x3f	; 63
 210:	8f 77       	andi	r24, 0x7F	; 127
 212:	8f bf       	out	0x3f, r24	; 63
	SMCR = 0x0F; // clearing SE [7.11.1 p.44]
 214:	8f e0       	ldi	r24, 0x0F	; 15
 216:	83 bf       	out	0x33, r24	; 51
	PRR &= ~((1 << 0) | (1 << 6)); // Enabling ADC and Timer2
 218:	e4 e6       	ldi	r30, 0x64	; 100
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8e 7b       	andi	r24, 0xBE	; 190
 220:	80 83       	st	Z, r24
	set_pins_direction();
 222:	0e 94 70 00 	call	0xe0	; 0xe0 <set_pins_direction>
	led_power_on(POT_ADC_PIN);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <led_power_on>
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_14>:

ISR(TIMER0_COMPA_vect) {
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	TIFR0 = (1 << 1); // clear flag [12.9.7 p.111]
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	85 bb       	out	0x15, r24	; 21
	counter_timer_overflow -= 1;
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (counter_timer_overflow <= 0)
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 282:	81 11       	cpse	r24, r1
 284:	02 c0       	rjmp	.+4      	; 0x28a <__vector_14+0x3c>
		sleep_power();
 286:	0e 94 ae 00 	call	0x15c	; 0x15c <sleep_power>
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__divmodhi4>:
 2ac:	97 fb       	bst	r25, 7
 2ae:	07 2e       	mov	r0, r23
 2b0:	16 f4       	brtc	.+4      	; 0x2b6 <__divmodhi4+0xa>
 2b2:	00 94       	com	r0
 2b4:	07 d0       	rcall	.+14     	; 0x2c4 <__divmodhi4_neg1>
 2b6:	77 fd       	sbrc	r23, 7
 2b8:	09 d0       	rcall	.+18     	; 0x2cc <__divmodhi4_neg2>
 2ba:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 2be:	07 fc       	sbrc	r0, 7
 2c0:	05 d0       	rcall	.+10     	; 0x2cc <__divmodhi4_neg2>
 2c2:	3e f4       	brtc	.+14     	; 0x2d2 <__divmodhi4_exit>

000002c4 <__divmodhi4_neg1>:
 2c4:	90 95       	com	r25
 2c6:	81 95       	neg	r24
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	08 95       	ret

000002cc <__divmodhi4_neg2>:
 2cc:	70 95       	com	r23
 2ce:	61 95       	neg	r22
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255

000002d2 <__divmodhi4_exit>:
 2d2:	08 95       	ret

000002d4 <__udivmodhi4>:
 2d4:	aa 1b       	sub	r26, r26
 2d6:	bb 1b       	sub	r27, r27
 2d8:	51 e1       	ldi	r21, 0x11	; 17
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <__udivmodhi4_ep>

000002dc <__udivmodhi4_loop>:
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	a6 17       	cp	r26, r22
 2e2:	b7 07       	cpc	r27, r23
 2e4:	10 f0       	brcs	.+4      	; 0x2ea <__udivmodhi4_ep>
 2e6:	a6 1b       	sub	r26, r22
 2e8:	b7 0b       	sbc	r27, r23

000002ea <__udivmodhi4_ep>:
 2ea:	88 1f       	adc	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	5a 95       	dec	r21
 2f0:	a9 f7       	brne	.-22     	; 0x2dc <__udivmodhi4_loop>
 2f2:	80 95       	com	r24
 2f4:	90 95       	com	r25
 2f6:	bc 01       	movw	r22, r24
 2f8:	cd 01       	movw	r24, r26
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
