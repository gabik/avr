
MentosMachne.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000959  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000715  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000552  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000450  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a5  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000023a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 31 01 	call	0x262	; 0x262 <main>
  88:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
volatile uint8_t counter_timer_overflow;
volatile uint8_t wip;

void adc_init() {
	// Wake ADC up from sleep
	PRR &= ~(1 << 0); // PRADC=0
  90:	e4 e6       	ldi	r30, 0x64	; 100
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	80 83       	st	Z, r24
	// ADREF = AVcc [REFS0=1, REFS1=0]
	// ADLAR = 1
	ADMUX = (1 << 6) | (1 << 5); // 01100000
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1 << 7) | (1 << 1) | (1 << 0); // 10000011
  a0:	83 e8       	ldi	r24, 0x83	; 131
  a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a6:	08 95       	ret

000000a8 <adc_read>:
}

uint8_t adc_read(uint8_t ch) {
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	adc_init();
  ac:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	// Masking channel to be 0-3 (PC0-PC3)
	ch &= 3;
	// Setting the multiplex to be the "ch", clearing the 2 bits first
	ADMUX = (ADMUX & 0xFC) | ch; //FC = 11111100, ch is 00|01|10|11
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8c 7f       	andi	r24, 0xFC	; 252
  b8:	c3 70       	andi	r28, 0x03	; 3
  ba:	c8 2b       	or	r28, r24
  bc:	c0 83       	st	Z, r28
	// Start conversation
	ADCSRA |= (1 << 6);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	// Waiting for the conversation to finish with rechecking the ADCS
	while (ADCSRA & (1 << 6));
  c8:	80 81       	ld	r24, Z
  ca:	86 fd       	sbrc	r24, 6
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <adc_read+0x20>
	// Once the conversation over I read the result and empty the flag
	ADCSRA |= (1 << 4); // ADIF
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	80 83       	st	Z, r24
	return ADCH;
  d8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <set_pins_direction>:

void set_pins_direction() {
	// Setting ADC0=PC0 as input
	DDRC = 0;
  e0:	17 b8       	out	0x07, r1	; 7
	// Setting bus D as input, for INT0-PD2 interrupts
	DDRD = 0;
  e2:	1a b8       	out	0x0a, r1	; 10
	// Setting bus B as input, we will use PB1 as input
	DDRB = 0;
  e4:	14 b8       	out	0x04, r1	; 4
	// Setting PD3, PD5 as output (PWM - OC2B, OC0B)
	DDRD = (1 << PD3) | (1 << PD5);
  e6:	88 e2       	ldi	r24, 0x28	; 40
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	08 95       	ret

000000ec <setup>:
}

void setup() {
	// Disabling all digital input buffers on ADC pins [21.9.5, p.266]
	DIDR0 = 0x3F;
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	DIDR1 = 0x03; // 20.3.3 p.249
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
	// Disabling Analog comperator for reducing power
	ACSR |= (1 << 7); // [20.3.2 p.247]
  f8:	80 b7       	in	r24, 0x30	; 48
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	80 bf       	out	0x30, r24	; 48
	// Disable Timers [12.9.2, p.109]
	TCCR0A = 0;
  fe:	14 bc       	out	0x24, r1	; 36
	TCCR1A = 0;
 100:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR2A = 0;
 104:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR0B = 0;
 108:	15 bc       	out	0x25, r1	; 37
	TCCR1B = 0;
 10a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR2B = 0;
 10e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	// Disable Watchdog timer [p.50]
	MCUSR &= ~(1 << 3); // WDRF clear (not mendatory)
 112:	84 b7       	in	r24, 0x34	; 52
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	84 bf       	out	0x34, r24	; 52
	WDTCSR = (1 << 4); // WDCE (change enabler)
 118:	e0 e6       	ldi	r30, 0x60	; 96
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	80 83       	st	Z, r24
	WDTCSR = 0; // clear WDE and all register
 120:	10 82       	st	Z, r1
	// Disabling USART, Disabling SPI, Disabling TWI and Reducing power [7.11.3 p.45]
	PRR = 0xF7;
 122:	87 ef       	ldi	r24, 0xF7	; 247
 124:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	wip = 0;
 128:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <wip>
 12c:	08 95       	ret

0000012e <pwm_led_start>:
}

void pwm_led_start(uint8_t val) {
	// PRTIM2 to 0, canceling power reduce, OC2A as output
	PRR &= ~(1 << 6); // Enabling timer2 on PRR
 12e:	e4 e6       	ldi	r30, 0x64	; 100
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	9f 7b       	andi	r25, 0xBF	; 191
 136:	90 83       	st	Z, r25
	TCNT2 = 0; // clearing counter
 138:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	// Setting Fast PWM non-inverted mode, TOP = OCRA, with prescaler of 32
	TCCR2A = (1 << 5) | (1 << 1) | (1 << 0);
 13c:	93 e2       	ldi	r25, 0x23	; 35
 13e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1 << 3) | (1 << 1) | (1 << 0);
 142:	9b e0       	ldi	r25, 0x0B	; 11
 144:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 82; // TOP Value, with 122hz cycle, TOP=82 will give 100hz cycle
 148:	e3 eb       	ldi	r30, 0xB3	; 179
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	92 e5       	ldi	r25, 0x52	; 82
 14e:	90 83       	st	Z, r25
	if (val > 100) val = 100; // limiting val to 100%
	OCR2B = OCR2A * val / 100; //OCR2B set to TOPxN%
 150:	90 81       	ld	r25, Z
 152:	85 36       	cpi	r24, 0x65	; 101
 154:	08 f0       	brcs	.+2      	; 0x158 <pwm_led_start+0x2a>
 156:	84 e6       	ldi	r24, 0x64	; 100
 158:	89 9f       	mul	r24, r25
 15a:	c0 01       	movw	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	64 e6       	ldi	r22, 0x64	; 100
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 c5 01 	call	0x38a	; 0x38a <__divmodhi4>
 166:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 16a:	08 95       	ret

0000016c <stop_counter_timer1>:
}

void stop_counter_timer1() {
	TCCR1A = 0;
 16c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;
 170:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 174:	08 95       	ret

00000176 <start_timer_seconds>:

void start_timer_seconds(uint8_t seconds) {
	// Using Timer1 in CTC mode with prescaler:
	// prescaler 1024: 1M/1024 = 976hz ticks. OCR0A of 195 will give TOV every 195x(1/976)=0.2.
	// counting 4 times TOV = 1 second.
	PRR &= ~(1 << 3); // Enabling timer1 on PRR
 176:	e4 e6       	ldi	r30, 0x64	; 100
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	97 7f       	andi	r25, 0xF7	; 247
 17e:	90 83       	st	Z, r25
	counter_timer_overflow = seconds * 5; // starting from TOP and reducing to 0 every TOV interrupt
 180:	98 2f       	mov	r25, r24
 182:	99 0f       	add	r25, r25
 184:	99 0f       	add	r25, r25
 186:	89 0f       	add	r24, r25
 188:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter_timer_overflow>
	TCNT1 = 0;
 18c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 190:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1A = 0; // Normal port operation, CTC mode (WGM11=1) [13.11.1 p.134]
 194:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << 3) | (1 << 2) | (1 << 0); // WGM12, CS10:2 = 1,0,1 = prescaler 1024
 198:	8d e0       	ldi	r24, 0x0D	; 13
 19a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = 195; // 0.2 Second cycles
 19e:	83 ec       	ldi	r24, 0xC3	; 195
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = (1 << 1); // OCIE1A - compare interrupt [13.11.8 p.139]
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	SREG |= (1 << 7); // Enabling interrupt [4.3.1 p.10]
 1b0:	8f b7       	in	r24, 0x3f	; 63
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8f bf       	out	0x3f, r24	; 63
 1b6:	08 95       	ret

000001b8 <pwm_servo_start>:
}

void pwm_servo_start() {
	wip = 1; // Working in progress, logic disable for INT0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <wip>
	// PRTIM0 to 0, canceling power reduce, OC0B as output
	PRR &= ~(1 << 5); // Enabling timer0 on PRR
 1be:	e4 e6       	ldi	r30, 0x64	; 100
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	80 83       	st	Z, r24
	TCNT0 = 0; // clearing counter
 1c8:	16 bc       	out	0x26, r1	; 38
	// Setting Fast PWM non-inverted mode, TOP = OCRA, with prescaler of 256
	// Servo need 50hz cycles (20ms), so 1Mhz = 0.000001s x 256 presaler = 0.000256s. 20ms = 0.02s. 0.02 / 0.000256 = 78. TOP=78
	TCCR0A = (1 << 5) | (1 << 1) | (1 << 0); // set COM0B1, WGM01, WGM02 
 1ca:	83 e2       	ldi	r24, 0x23	; 35
 1cc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << 3) | (1 << 2); // set WGM02, CS02
 1ce:	8c e0       	ldi	r24, 0x0C	; 12
 1d0:	85 bd       	out	0x25, r24	; 37
	OCR0A = 78; // TOP Value, with 3906hz cycle, TOP=78 will give 50hz cycle
 1d2:	8e e4       	ldi	r24, 0x4E	; 78
 1d4:	87 bd       	out	0x27, r24	; 39
	OCR0B = 1; //OCR0B set to -90c TOP=20ms, we need 0.3ms == 0.3/20*78 = 1
 1d6:	98 bd       	out	0x28, r25	; 40
	timer1_end_todo = MOTOR_DROP;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	start_timer_seconds(MOTOR_SECONDS);
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	0e 94 bb 00 	call	0x176	; 0x176 <start_timer_seconds>
 1e4:	08 95       	ret

000001e6 <motor_drop>:
}

void motor_drop() {
	OCR0B = 10; // 2.5/20*78 = 10
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	88 bd       	out	0x28, r24	; 40
	timer1_end_todo = MOTOR_BACK;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	start_timer_seconds(MOTOR_SECONDS);
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 bb 00 	call	0x176	; 0x176 <start_timer_seconds>
 1f6:	08 95       	ret

000001f8 <motor_back>:
}

void motor_back() {
	OCR0B = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	88 bd       	out	0x28, r24	; 40
	timer1_end_todo = GO_SLEEP;
 1fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	start_timer_seconds(MOTOR_SECONDS);
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	0e 94 bb 00 	call	0x176	; 0x176 <start_timer_seconds>
	wip = 0;
 206:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <wip>
 20a:	08 95       	ret

0000020c <sleep_power>:
}

void sleep_power() {
	// Reducing power [7.10 p.42]
	// Disabling ADC and ADC clock and Timer0:2
	PRR |= (1 << 0) | (1 << 6) | (1 << 5) | (1 << 3); // PRADC=1, PRTIM2=1, PRTIM0=1, PRTIM1=1
 20c:	e4 e6       	ldi	r30, 0x64	; 100
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	89 66       	ori	r24, 0x69	; 105
 214:	80 83       	st	Z, r24
	ADCSRA &= (1 << 7); // ADEN=0
 216:	ea e7       	ldi	r30, 0x7A	; 122
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 78       	andi	r24, 0x80	; 128
 21e:	80 83       	st	Z, r24
	//TCCR2B = 0;
	// Disable Timer1 for counting
	//TCCR1A = 0;
	//TCCR1B = 0;
	// Set all pins as input
	DDRB = 0;
 220:	14 b8       	out	0x04, r1	; 4
	DDRC = 0;
 222:	17 b8       	out	0x07, r1	; 7
	DDRD = 0;
 224:	1a b8       	out	0x0a, r1	; 10
	// Interrupts
	EICRA = (1 << 1) | (1 << 0); // Enable INT0 rising edge interrupt. ISC01:0=1,1 [10.2.1 p.71]
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1 << 0); // INT0 interrupt enable [10.2.2 p.72]
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	8d bb       	out	0x1d, r24	; 29
	SREG |= (1 << 7); // Enabling interrupt [4.3.1 p.10]
 230:	8f b7       	in	r24, 0x3f	; 63
 232:	80 68       	ori	r24, 0x80	; 128
 234:	8f bf       	out	0x3f, r24	; 63
	// Set sleep mode
	SMCR = (1 << 2); // Power-Down mode [7.11.1 p.44]
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	83 bf       	out	0x33, r24	; 51
	// Disable BOD on sleep [p.44] less than 3 cycles before sleep
	MCUCR = (1 << 6) | (1 << 5);
 23a:	80 e6       	ldi	r24, 0x60	; 96
 23c:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<BODSE);  // [7.11.2 p.44]
 23e:	85 b7       	in	r24, 0x35	; 53
 240:	8f 7d       	andi	r24, 0xDF	; 223
 242:	85 bf       	out	0x35, r24	; 53
	// Go To sleep
	SMCR |= (1 << 0); // SE=1 (Sleep enable)
 244:	83 b7       	in	r24, 0x33	; 51
 246:	81 60       	ori	r24, 0x01	; 1
 248:	83 bf       	out	0x33, r24	; 51
 24a:	08 95       	ret

0000024c <led_power_on>:
}

void led_power_on(uint8_t adc_ch) {
	uint8_t level = adc_read(adc_ch);
 24c:	0e 94 54 00 	call	0xa8	; 0xa8 <adc_read>
	pwm_led_start(level);
 250:	0e 94 97 00 	call	0x12e	; 0x12e <pwm_led_start>
	timer1_end_todo = GO_SLEEP;
 254:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	PORTB |= (1 << PB1); // pull up resistor on input button
 258:	29 9a       	sbi	0x05, 1	; 5
	start_timer_seconds(LED_SECONDS);
 25a:	8e e1       	ldi	r24, 0x1E	; 30
 25c:	0e 94 bb 00 	call	0x176	; 0x176 <start_timer_seconds>
 260:	08 95       	ret

00000262 <main>:
}

int main() {
	setup();
 262:	0e 94 76 00 	call	0xec	; 0xec <setup>
	set_pins_direction();
 266:	0e 94 70 00 	call	0xe0	; 0xe0 <set_pins_direction>
	led_power_on(POT_ADC_PIN);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 26 01 	call	0x24c	; 0x24c <led_power_on>
 270:	ff cf       	rjmp	.-2      	; 0x270 <main+0xe>

00000272 <__vector_1>:
	while (1);
}

ISR(INT0_vect) {
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	if (!wip) {
 294:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wip>
 298:	81 11       	cpse	r24, r1
 29a:	12 c0       	rjmp	.+36     	; 0x2c0 <__vector_1+0x4e>
		EIFR = (1 << 0); // clear flag [10.2.3 p.72]
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	8c bb       	out	0x1c, r24	; 28
		EIMSK &= ~(1 << 0); // Disabling interrupt [10.2.2 p.72]
 2a0:	e8 98       	cbi	0x1d, 0	; 29
		SREG &= ~(1 << 7); // Disabling interrupt [4.3.1 p.10]
 2a2:	8f b7       	in	r24, 0x3f	; 63
 2a4:	8f 77       	andi	r24, 0x7F	; 127
 2a6:	8f bf       	out	0x3f, r24	; 63
		SMCR = 0x0F; // clearing SE [7.11.1 p.44]
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	83 bf       	out	0x33, r24	; 51
		PRR &= ~((1 << 0) | (1 << 6)); // Enabling ADC and Timer2
 2ac:	e4 e6       	ldi	r30, 0x64	; 100
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	8e 7b       	andi	r24, 0xBE	; 190
 2b4:	80 83       	st	Z, r24
		set_pins_direction();
 2b6:	0e 94 70 00 	call	0xe0	; 0xe0 <set_pins_direction>
		led_power_on(POT_ADC_PIN);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 26 01 	call	0x24c	; 0x24c <led_power_on>
	}
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	TIFR1 = (1 << 1); // clear flag [13.11.9 p.140]
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	86 bb       	out	0x16, r24	; 22
	counter_timer_overflow -= 1;
 308:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter_timer_overflow>
 30c:	81 50       	subi	r24, 0x01	; 1
 30e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter_timer_overflow>
	if ((!(DDRB & (1 << PB1))) && (!(PINB & (1 << PB1)))) { // pin is input and button is pressed
 312:	21 99       	sbic	0x04, 1	; 4
 314:	11 c0       	rjmp	.+34     	; 0x338 <__vector_11+0x56>
 316:	19 99       	sbic	0x03, 1	; 3
 318:	0f c0       	rjmp	.+30     	; 0x338 <__vector_11+0x56>
		stop_counter_timer1();
 31a:	0e 94 b6 00 	call	0x16c	; 0x16c <stop_counter_timer1>
		counter_timer_overflow = 0;
 31e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter_timer_overflow>
		// Disabling the button (as output + clear pin)
		DDRB |= (1 << PB1);
 322:	21 9a       	sbi	0x04, 1	; 4
		PORTB &= ~(1 << PB1);
 324:	29 98       	cbi	0x05, 1	; 5
		// Shut button led and stop PWM on Timer2
		OCR2B = 0;
 326:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		TCCR2A = 0;
 32a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = 0;
 32e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		pwm_servo_start();
 332:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pwm_servo_start>
 336:	18 c0       	rjmp	.+48     	; 0x368 <__vector_11+0x86>
	}
	else if (counter_timer_overflow == 0) {
 338:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter_timer_overflow>
 33c:	81 11       	cpse	r24, r1
 33e:	14 c0       	rjmp	.+40     	; 0x368 <__vector_11+0x86>
		if (timer1_end_todo == GO_SLEEP)
 340:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 344:	81 11       	cpse	r24, r1
 346:	03 c0       	rjmp	.+6      	; 0x34e <__vector_11+0x6c>
			sleep_power();
 348:	0e 94 06 01 	call	0x20c	; 0x20c <sleep_power>
 34c:	0d c0       	rjmp	.+26     	; 0x368 <__vector_11+0x86>
		else if (timer1_end_todo == MOTOR_BACK)
 34e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	19 f4       	brne	.+6      	; 0x35c <__vector_11+0x7a>
			motor_back();
 356:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <motor_back>
 35a:	06 c0       	rjmp	.+12     	; 0x368 <__vector_11+0x86>
		else if (timer1_end_todo == MOTOR_DROP)
 35c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	11 f4       	brne	.+4      	; 0x368 <__vector_11+0x86>
			motor_drop();
 364:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <motor_drop>
	}
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__divmodhi4>:
 38a:	97 fb       	bst	r25, 7
 38c:	07 2e       	mov	r0, r23
 38e:	16 f4       	brtc	.+4      	; 0x394 <__divmodhi4+0xa>
 390:	00 94       	com	r0
 392:	07 d0       	rcall	.+14     	; 0x3a2 <__divmodhi4_neg1>
 394:	77 fd       	sbrc	r23, 7
 396:	09 d0       	rcall	.+18     	; 0x3aa <__divmodhi4_neg2>
 398:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__udivmodhi4>
 39c:	07 fc       	sbrc	r0, 7
 39e:	05 d0       	rcall	.+10     	; 0x3aa <__divmodhi4_neg2>
 3a0:	3e f4       	brtc	.+14     	; 0x3b0 <__divmodhi4_exit>

000003a2 <__divmodhi4_neg1>:
 3a2:	90 95       	com	r25
 3a4:	81 95       	neg	r24
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
 3a8:	08 95       	ret

000003aa <__divmodhi4_neg2>:
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255

000003b0 <__divmodhi4_exit>:
 3b0:	08 95       	ret

000003b2 <__udivmodhi4>:
 3b2:	aa 1b       	sub	r26, r26
 3b4:	bb 1b       	sub	r27, r27
 3b6:	51 e1       	ldi	r21, 0x11	; 17
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <__udivmodhi4_ep>

000003ba <__udivmodhi4_loop>:
 3ba:	aa 1f       	adc	r26, r26
 3bc:	bb 1f       	adc	r27, r27
 3be:	a6 17       	cp	r26, r22
 3c0:	b7 07       	cpc	r27, r23
 3c2:	10 f0       	brcs	.+4      	; 0x3c8 <__udivmodhi4_ep>
 3c4:	a6 1b       	sub	r26, r22
 3c6:	b7 0b       	sbc	r27, r23

000003c8 <__udivmodhi4_ep>:
 3c8:	88 1f       	adc	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	5a 95       	dec	r21
 3ce:	a9 f7       	brne	.-22     	; 0x3ba <__udivmodhi4_loop>
 3d0:	80 95       	com	r24
 3d2:	90 95       	com	r25
 3d4:	bc 01       	movw	r22, r24
 3d6:	cd 01       	movw	r24, r26
 3d8:	08 95       	ret

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
